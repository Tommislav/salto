/** * @author Matt Przybylski [http://www.reintroducing.com] * @version 1.0 */package se.salomonsson.salto.utils{	import flash.external.ExternalInterface;	import flash.utils.Dictionary;	import flash.utils.getQualifiedClassName;	import se.isotop.utils.JSCheck;	public class QueryString	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		// singleton instance		private static var _instance:QueryString;		private static var _allowInstance:Boolean;				private var _pairDict:Dictionary;		private var _url:String;		private var _pairs:Array;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			// singleton instance of QueryString		public static function getInstance():QueryString 		{			if (QueryString._instance == null)			{				QueryString._allowInstance = true;				QueryString._instance = new QueryString();				QueryString._allowInstance = false;			}						return QueryString._instance;		}				public function QueryString() 		{			this.parseValues();						if (!QueryString._allowInstance)			{				throw new Error("Error: Use QueryString.getInstance() instead of the new keyword.");			}		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				private function parseValues():void		{			this._pairDict = new Dictionary(true);			if ( JSCheck.javascripAvailable )			{				try				{					this._url = ExternalInterface.call("document.location.search.toString");										if ( this._url != null && this._url.length > 0 )					{						this._pairs = this._url.split("?")[1].split("&");												for (var i:int = 0; i < this._pairs.length; i++)						{							var pairName:String = this._pairs[i].split("=")[0];							var pairValue:String = this._pairs[i].split("=")[1];														this._pairDict[pairName] = pairValue;						}					}				}				catch ( err:* )				{									}			}		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Returns the value of the specified query string parameter.		 * 		 * @param $val A string identifying the parameter for whose value you want to retrieve		 * 		 * @return String The value for the given parameter		 */		public function getValue($val:String):String		{			return this._pairDict[$val];		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			public function toString():String		{			return getQualifiedClassName(this);		}	//- Update.END CLASS ---------------------------------------------------------------------------------------------	}}